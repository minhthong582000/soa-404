// Code generated by mockery v2.20.0. DO NOT EDIT.

package pb

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockRandomServiceServer is an autogenerated mock type for the RandomServiceServer type
type MockRandomServiceServer struct {
	mock.Mock
}

type MockRandomServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRandomServiceServer) EXPECT() *MockRandomServiceServer_Expecter {
	return &MockRandomServiceServer_Expecter{mock: &_m.Mock}
}

// GetRandNumber provides a mock function with given fields: _a0, _a1
func (_m *MockRandomServiceServer) GetRandNumber(_a0 context.Context, _a1 *GetRandNumberRequest) (*GetRandNumberReply, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *GetRandNumberReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *GetRandNumberRequest) (*GetRandNumberReply, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *GetRandNumberRequest) *GetRandNumberReply); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*GetRandNumberReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *GetRandNumberRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRandomServiceServer_GetRandNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandNumber'
type MockRandomServiceServer_GetRandNumber_Call struct {
	*mock.Call
}

// GetRandNumber is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *GetRandNumberRequest
func (_e *MockRandomServiceServer_Expecter) GetRandNumber(_a0 interface{}, _a1 interface{}) *MockRandomServiceServer_GetRandNumber_Call {
	return &MockRandomServiceServer_GetRandNumber_Call{Call: _e.mock.On("GetRandNumber", _a0, _a1)}
}

func (_c *MockRandomServiceServer_GetRandNumber_Call) Run(run func(_a0 context.Context, _a1 *GetRandNumberRequest)) *MockRandomServiceServer_GetRandNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*GetRandNumberRequest))
	})
	return _c
}

func (_c *MockRandomServiceServer_GetRandNumber_Call) Return(_a0 *GetRandNumberReply, _a1 error) *MockRandomServiceServer_GetRandNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRandomServiceServer_GetRandNumber_Call) RunAndReturn(run func(context.Context, *GetRandNumberRequest) (*GetRandNumberReply, error)) *MockRandomServiceServer_GetRandNumber_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedRandomServiceServer provides a mock function with given fields:
func (_m *MockRandomServiceServer) mustEmbedUnimplementedRandomServiceServer() {
	_m.Called()
}

// MockRandomServiceServer_mustEmbedUnimplementedRandomServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedRandomServiceServer'
type MockRandomServiceServer_mustEmbedUnimplementedRandomServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedRandomServiceServer is a helper method to define mock.On call
func (_e *MockRandomServiceServer_Expecter) mustEmbedUnimplementedRandomServiceServer() *MockRandomServiceServer_mustEmbedUnimplementedRandomServiceServer_Call {
	return &MockRandomServiceServer_mustEmbedUnimplementedRandomServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedRandomServiceServer")}
}

func (_c *MockRandomServiceServer_mustEmbedUnimplementedRandomServiceServer_Call) Run(run func()) *MockRandomServiceServer_mustEmbedUnimplementedRandomServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRandomServiceServer_mustEmbedUnimplementedRandomServiceServer_Call) Return() *MockRandomServiceServer_mustEmbedUnimplementedRandomServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockRandomServiceServer_mustEmbedUnimplementedRandomServiceServer_Call) RunAndReturn(run func()) *MockRandomServiceServer_mustEmbedUnimplementedRandomServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewMockRandomServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockRandomServiceServer creates a new instance of MockRandomServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRandomServiceServer(t mockConstructorTestingTNewMockRandomServiceServer) *MockRandomServiceServer {
	mock := &MockRandomServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
