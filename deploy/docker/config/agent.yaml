server:
  log_level: debug

metrics:
  global:
    scrape_interval: 60s
    remote_write:
      - url: http://${REMOTE_WRITE_HOST:-localhost:9009}/api/v1/push
        headers:
          X-Scope-OrgID: demo
  configs:
    - name: default
      scrape_configs:
        - job_name: local_scrape
          static_configs:
            - targets: ["127.0.0.1:12345"]
        - job_name: random-service
          static_configs:
            - targets: ["${RANDOM_SERVICE_HOST:-localhost:9001}"]

logs:
  configs:
    - name: default
      clients:
        - url: http://${LOKI_HOST:-localhost:3100}/loki/api/v1/push
      positions:
        filename: /tmp/positions.yaml
      scrape_configs:
      ## Uncomment to read logs from /var/log
      #- job_name: system
      #  static_configs:
      #  - targets: [localhost]
      #    labels:
      #      job: varlogs
      #      __path__: /var/log/*log

traces:
  configs:
    - name: default
      remote_write:
        - endpoint: ${TEMPO_HOST:-localhost:4317}
          insecure: true
      service_graphs:
        enabled: true
      receivers:
        jaeger:
          protocols:
            grpc: null
            thrift_binary: null
            thrift_compact: null
            thrift_http: null
          remote_sampling:
            strategy_file: /etc/agent/strategies.json
            tls:
              insecure: true
        opencensus: null
        otlp:
          protocols:
            grpc:
              endpoint: "0.0.0.0:4317"
            http:
              endpoint: "0.0.0.0:4318"
        zipkin: null

#
# Integrations
#
# Uncomment individual integrations below to enable them. Some integrations are
# enabled by default.
#

integrations:
  metrics:
    autoscrape:
      enable: true
      metrics_instance: default

  # agent
  agent:
    # The Agent dashboards are written to assume Kubernetes, so we inject some
    # fake Kubernetes labels here.
    extra_labels:
      cluster: docker-compose
      namespace: docker-compose
      container: grafana-agent
      pod: grafana-agent-${HOSTNAME:-example}

  ## node_exporter
  # node_exporter: {}

  ## process
  # process:
  #   process_names:
  #     - name: "{{.Comm}}"
  #       cmdline:
  #       - '.+'

  ## mysql (requires docker-compose mysql profile)
  # mysql_configs:
  # - data_source_name: root@(${MYSQL_HOST:-localhost:3306})/

  ## postgres (requires docker-compose postgres profile)
  # postgres_configs:
  # - data_source_names:
  #   - postgresql://postgres:password@localhost:5432/postgres?sslmode=disable

  ## redis (requires docker-compose redis profile)
  # redis_configs:
  # - redis_addr: ${REDIS_HOST:-localhost:6379}

  ## dnsmasq (requires docker-compose dnsmasq profile)
  # dnsmasq_configs:
  # - dnsmasq_address: ${DNSMASQ_HOST:-localhost:30053}
  #   leases_path: /tmp/dnsmasq-leases/dnsmasq.leases

  ## memcached (requires docker-compose memcached profile)
  # memcached_configs:
  # - memcached_address: ${MEMCACHED_HOST:-localhost:11211}
  #   timeout: 10s

  ## statsd
  # statsd: {}

  ## consul (requires docker-compose consul profile)
  # consul_configs:
  # - server: http://${CONSUL_HOST:-localhost:8500}

  ## elasticsearch (requires docker-compose elasticsearch profile)
  # elasticsearch_configs:
  # - address: http://${ELASTICSEARCH_HOST:-localhost:9200}

  ## kafka (requires docker-compose kafka profile)
  # kafka_configs:
  # - kafka_uris: [${KAFKA_HOST:-localhost:9093}]

  ## github (requires docker-compose github profile)
  # github_configs:
  # - repositories:
  #   - grafana/agent

  ## mongodb (requires docker-compose mongodb profile)
  # mongodb_configs:
  # - mongodb_uri: mongodb://${MONGODB_HOST:-mongodb:27017}
  #   relabel_configs:
  #   - source_labels: [__address__]
  #     target_label: service_name
  #     replacement: 'mongodb'
  #   - source_labels: [__address__]
  #     target_label: mongodb_cluster
  #     replacement: 'mongodb-cluster'

  ## cadvisor
  # cadvisor:
  #   disabled_metrics:
  #   - disk
  #   enabled_metrics:
  #   - percpu
