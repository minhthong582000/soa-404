// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/minhthong582000/soa-404/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// IRandomRepository is an autogenerated mock type for the IRandomRepository type
type IRandomRepository struct {
	mock.Mock
}

type IRandomRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IRandomRepository) EXPECT() *IRandomRepository_Expecter {
	return &IRandomRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, seed
func (_m *IRandomRepository) Get(ctx context.Context, seed int64) (entity.Random, error) {
	ret := _m.Called(ctx, seed)

	var r0 entity.Random
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.Random, error)); ok {
		return rf(ctx, seed)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.Random); ok {
		r0 = rf(ctx, seed)
	} else {
		r0 = ret.Get(0).(entity.Random)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, seed)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRandomRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type IRandomRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - seed int64
func (_e *IRandomRepository_Expecter) Get(ctx interface{}, seed interface{}) *IRandomRepository_Get_Call {
	return &IRandomRepository_Get_Call{Call: _e.mock.On("Get", ctx, seed)}
}

func (_c *IRandomRepository_Get_Call) Run(run func(ctx context.Context, seed int64)) *IRandomRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *IRandomRepository_Get_Call) Return(_a0 entity.Random, _a1 error) *IRandomRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRandomRepository_Get_Call) RunAndReturn(run func(context.Context, int64) (entity.Random, error)) *IRandomRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewIRandomRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRandomRepository creates a new instance of IRandomRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRandomRepository(t mockConstructorTestingTNewIRandomRepository) *IRandomRepository {
	mock := &IRandomRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
