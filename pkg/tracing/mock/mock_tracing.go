// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/minhthong582000/soa-404/pkg/tracing (interfaces: Tracer)
//
// Generated by this command:
//
//	mockgen -destination=mock_tracing.go -package=mock github.com/minhthong582000/soa-404/pkg/tracing Tracer
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTracer is a mock of Tracer interface.
type MockTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTracerMockRecorder
}

// MockTracerMockRecorder is the mock recorder for MockTracer.
type MockTracerMockRecorder struct {
	mock *MockTracer
}

// NewMockTracer creates a new mock instance.
func NewMockTracer(ctrl *gomock.Controller) *MockTracer {
	mock := &MockTracer{ctrl: ctrl}
	mock.recorder = &MockTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTracer) EXPECT() *MockTracerMockRecorder {
	return m.recorder
}

// EndSpan mocks base method.
func (m *MockTracer) EndSpan(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndSpan", arg0)
}

// EndSpan indicates an expected call of EndSpan.
func (mr *MockTracerMockRecorder) EndSpan(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndSpan", reflect.TypeOf((*MockTracer)(nil).EndSpan), arg0)
}

// GetSpanID mocks base method.
func (m *MockTracer) GetSpanID(arg0 context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpanID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSpanID indicates an expected call of GetSpanID.
func (mr *MockTracerMockRecorder) GetSpanID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpanID", reflect.TypeOf((*MockTracer)(nil).GetSpanID), arg0)
}

// GetTraceID mocks base method.
func (m *MockTracer) GetTraceID(arg0 context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTraceID indicates an expected call of GetTraceID.
func (mr *MockTracerMockRecorder) GetTraceID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceID", reflect.TypeOf((*MockTracer)(nil).GetTraceID), arg0)
}

// StartSpan mocks base method.
func (m *MockTracer) StartSpan(arg0 context.Context, arg1 string) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSpan", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// StartSpan indicates an expected call of StartSpan.
func (mr *MockTracerMockRecorder) StartSpan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSpan", reflect.TypeOf((*MockTracer)(nil).StartSpan), arg0, arg1)
}
